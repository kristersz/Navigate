@model Navigate.ViewModels.WorkItemDataInputModel


<h2>@ViewBag.Pagetitle</h2>

@using (Html.BeginForm("Create", "WorkItem", FormMethod.Post, new { @id = "createEditForm", @class = "form-horizontal" })) {
    @Html.ValidationSummary(true)
    @Html.AntiForgeryToken()
    <div class="well">
        <fieldset>
            <legend>Uzdevums</legend>
            <fieldset>
                <legend>Uzdevuma pamatinformācija</legend>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Subject)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.Subject)
                    @Html.ValidationMessageFor(model => model.Subject)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.Location)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.Location)
                    @Html.ValidationMessageFor(model => model.Location)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.Body)
                </div>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.Body, 4, 1, new { @id = "bodyTextArea"})
                    @Html.ValidationMessageFor(model => model.Body)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.Priority)
                </div>  
                <div class="editor-field">
                    @Html.DropDownListFor(model => model.Priority, Model.AllPriorities)
                    @Html.ValidationMessageFor(model => model.Priority)
                </div>

                <div class="editor-label">
                    <label>Kategorijas</label>
                </div>               
                <div style="overflow: auto">
                    @foreach (var category in Model.Categories)
                    {
                        <label for="category@(category.Id)" class="checkbox inline">
                            <input id="category@(category.Id) " type="checkbox" name="SelectedCategoryIds" value="@category.Id" @(Model.SelectedCategoryIds.Contains((int)category.Id) ? "checked" : "") /> @category.Name
                        </label>
                    }
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.Reminder)
                </div>
                <div class="editor-field">
                    @Html.DropDownListFor(model => model.Reminder, Model.AllReminders)
                    @Html.ValidationMessageFor(model => model.WorkItemType)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.WorkItemType)
                </div>
                <div class="editor-field">
                    @Html.DropDownListFor(model => model.WorkItemType, Model.AllWorkItemTypes)
                    @Html.ValidationMessageFor(model => model.WorkItemType)
                </div>
            </fieldset>
            <fieldset class="workItemTypeFieldsets" id="Task">
                <legend>Uzdevuma informācija</legend>
                <div class="editor-label">
                    @Html.LabelFor(model => model.DueDate)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.DueDate)
                    @Html.ValidationMessageFor(model => model.DueDate)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.Duration)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.Duration)
                    @Html.ValidationMessageFor(model => model.Duration)
                </div>
            </fieldset>
            <fieldset class="workItemTypeFieldsets" id="Appointment">
                <legend>Tikšanās informācija</legend>
                <div class="editor-label">
                    @Html.LabelFor(model => model.StartDate)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.StartDate)
                    @Html.ValidationMessageFor(model => model.StartDate)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.EndDate)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.EndDate)
                    @Html.ValidationMessageFor(model => model.EndDate)
                </div>                    
                <div class="editor-field">                  
                    @Html.CheckBoxFor(model => model.AllDayEvent)
                    @Html.LabelFor(model => model.AllDayEvent, new { @class = "checkbox inline editor-label" })
                    @Html.ValidationMessageFor(model => model.AllDayEvent)
                </div>
                <div class="editor-field">
                    @Html.CheckBoxFor(model => model.isRecurring)
                    @Html.LabelFor(model => model.isRecurring, new { @class = "checkbox inline editor-label" })
                    @Html.ValidationMessageFor(model => model.isRecurring)
                </div>
                <div id="recurrenceOptions">
                    <div id="appointmentTime">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.RecurringItemStart)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.RecurringItemStart)
                            @Html.ValidationMessageFor(model => model.RecurringItemStart)
                        </div>

                        <div class="editor-label">
                            @Html.LabelFor(model => model.RecurringItemEnd)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.RecurringItemEnd)
                            @Html.ValidationMessageFor(model => model.RecurringItemEnd)
                        </div>
                    </div>
                    <div id="recurrencePatternOptions">
                        <div id="recurrenceTypes">
                            <div class ="editor-label">
                                @Html.LabelFor(model => model.RecurrenceType)
                            </div>
                            <div>
                                @Html.EditorFor(model => model.RecurrenceType, "Enum_RadioButtonList")
                            </div>
                        </div>
                        <div id="recurrencePatterns">
                            <div id="Daily" class="patterns">
                                <div class="editor-field">
                                    Katru @Html.TextBoxFor(model => model.DailyInterval, new { @class = "number-input" }) dienu
                                    @Html.ValidationMessageFor(model => model.DailyInterval)
                                </div>
                            </div>

                            <div id="Weekly" class="patterns">
                                <div class="editor-field">
                                    Atkārtojas katras @Html.TextBoxFor(model => model.WeeklyInterval, new { @class = "number-input" }) nedēļas:
                                    @Html.ValidationMessageFor(model => model.WeeklyInterval)
                                </div>
                                <div id ="daysOfWeek">
                                    @Html.CheckBoxesForEnumFlagsFor(model => model.WeekDays)
                                </div>
                            </div>
                            <div id="Monthly" class="patterns">
                                <div class="editor-field">
                                    Katra @Html.TextBoxFor(model => model.MonthlyInterval, new { @class = "number-input" }) mēneša @Html.TextBoxFor(model => model.DayOfMonth, new { @class = "number-input" }) dienā
                                    @Html.ValidationMessageFor(model => model.DayOfMonth)
                                    @Html.ValidationMessageFor(model => model.MonthlyInterval)
                                </div>
                            </div>

                            <div id="MonthNth" class="patterns">
                                <div class="editor-field">
                                    Katra @Html.TextBoxFor(model => model.MonthNthInterval, new { @class = "number-input" }) mēneša @Html.DropDownListFor(model => model.MonthInstance, Model.AllInstances) @Html.DropDownListFor(model => model.MonthDayOfWeekMask, Model.AllDaysOfWeek)
                                    @Html.ValidationMessageFor(model => model.MonthInstance)
                                    @Html.ValidationMessageFor(model => model.MonthNthInterval)
                                </div>
                            </div>

                            <div id="Yearly" class="patterns">
                                <div class="editor-field">
                                    Atkārtojas katra @Html.TextBoxFor(model => model.YearlyInterval, new { @class = "number-input" }) gada:
                                    @Html.TextBoxFor(model => model.DayOfMonthForYear, new { @class = "number-input" }) @Html.DropDownListFor(model => model.YearMonthOfYear, Model.AllMonthsOfYear)
                                    @Html.ValidationMessageFor(model => model.YearlyInterval)
                                    @Html.ValidationMessageFor(model => model.YearMonthOfYear)
                                    <div id="informationBlock" class="alert alert-info" style="display: none">
                                      <span></span>
                                    </div>
                                </div>
                            </div>

                            <div id="YearNth" class="patterns">
                                <div class="editor-field">
                                    Atkārtojas katra @Html.TextBoxFor(model => model.YearNthInterval, new { @class = "number-input" }) gada: <br /> 
                                    @Html.DropDownListFor(model => model.YearInstance, Model.AllInstances) @Html.DropDownListFor(model => model.YearNthMonthOfYear, Model.AllMonthsOfYear) @Html.DropDownListFor(model => model.YearDayOfWeekMask, Model.AllDaysOfWeek)
                                    @Html.ValidationMessageFor(model => model.YearNthInterval)
                                    @Html.ValidationMessageFor(model => model.YearNthMonthOfYear)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </fieldset>
            <div>
                <hr />
                <input type="submit" class="btn btn-primary" value="Saglabāt" />
            </div>
        </fieldset>
    </div>
}

<div>
    @Html.ActionLink("Atpakaļ uz sarakstu", "Index")
</div>

@section Scripts { 
    <script>
        $(document).ready(function () {

            $("#DayOfMonthForYear").change(function () {
                if ($(this).val() >= 29 && $(this).val() <= 31) {
                    $("#informationBlock span").text("Ne visos mēnešos ir " + $(this).val() + " dienas, tādā gadījumā notikums tiks ieplānots mēneša pēdējā dienā");
                    $("#informationBlock").show();
                }
                else $("#informationBlock").hide();
            });

            $("#AllDayEvent").change(function () {
                if ($(this).is(":checked")) {
                    $("#StartDate").removeClass("datetimefield").addClass("datefield").datetimepicker("destroy");
                    $("#StartDate").datepicker();
                    $("#EndDate").removeClass("datetimefield").addClass("datefield").datetimepicker("destroy");
                    $("#EndDate").datepicker();
                }
                else {
                    $("#StartDate").removeClass("datefield").addClass("datetimefield").datepicker("destroy");
                    $("#StartDate").datetimepicker({ controlType: 'select' });
                    $("#EndDate").removeClass("datefield").addClass("datetimefield").datepicker("destroy");
                    $("#EndDate").datetimepicker({ controlType: 'select' });
                }
            });

            $('#WorkItemType option').each(function() {
                if($(this).is(':selected')) {
                    $('#' + $(this).val()).show();
                }
            });

            $('#WorkItemType').change(function () {
                $('.workItemTypeFieldsets').hide();
                $('#' + $(this).val()).show();
            });

            if ($("#isRecurring").is(":checked")) {
                $("#recurrenceOptions").show();
            };

            $("#isRecurring").change(function () {
                if ($(this).is(":checked")) {
                    $("#recurrenceOptions").show();
                } else {
                    $("#recurrenceOptions").hide();
                };
            });

            $("input[name=RecurrenceType]").change(function () {
                var pattern = $(this).val();
                $(".patterns").hide();
                $("#" + pattern).show();
            });
            var val = ($("#recurrenceOptions input:checked").val());
            $("#" + val).show();
        });
    </script>
}
